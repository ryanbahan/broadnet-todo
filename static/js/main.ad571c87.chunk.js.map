{"version":3,"sources":["mockToDoData.js","Context.js","Form/Form.js","ToDoCard/ToDoCard.js","ToDoContainer/ToDoContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["data","id","uuidv4","title","taskItems","text","checked","MyContext","React","createContext","MyProvider","state","cards","addCard","card","setState","deleteCard","updatedCards","filter","updateListItems","listItems","find","items","localStorage","setItem","JSON","stringify","getItem","parse","this","Provider","value","props","children","Component","Form","useState","setTitle","taskItem","setTaskItem","updateTaskItems","formError","updateFormError","addTask","length","clearAll","Consumer","context","className","htmlFor","type","name","onChange","e","target","onClick","map","item","key","createCard","ToDoCard","checkedInputs","updateChecked","toggleChecked","updateState","updatedItems","input","defaultChecked","renderTaskItems","ToDoContainer","generateHTML","columnA","columnB","forEach","unshift","displayCards","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad571c87.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport const data = [\n  {\n    id: uuidv4(),\n    title: \"Default Card\",\n    taskItems: [\n      {id: uuidv4(), text: \"Land this job!\", checked: false},\n      {id: uuidv4(), text: \"eat sushi\", checked: false}\n    ]\n  },\n  {\n    id: uuidv4(),\n    title: \"Today's Workout\",\n    taskItems: [\n      {id: uuidv4(), text: \"Bench Press 3x5\", checked: false},\n      {id: uuidv4(), text: \"Overhead Lift 5x5\", checked: false},\n      {id: uuidv4(), text: \"Squats 5x10\", checked: false}\n    ]\n  },\n  {\n    id: uuidv4(),\n    title: \"Grocery List\",\n    taskItems: [\n      {id: uuidv4(), text: \"Bananas\", checked: false},\n      {id: uuidv4(), text: \"Broccoli\", checked: false},\n      {id: uuidv4(), text: \"Chicken\", checked: false},\n      {id: uuidv4(), text: \"Bread\", checked: false},\n      {id: uuidv4(), text: \"Milk\", checked: false}\n    ]\n  },\n  {\n    id: uuidv4(),\n    title: \"Weekend to-dos\",\n    taskItems: [\n      {id: uuidv4(), text: \"Mow Lawn\", checked: false},\n      {id: uuidv4(), text: \"Fix Sink\", checked: false}\n    ]\n  },\n  {\n    id: uuidv4(),\n    title: \"Next Week\",\n    taskItems: [{id: uuidv4(), text: \"Apply to Broadnet\", checked: false}]\n  },\n  {\n    id: uuidv4(),\n    title: \"Dev Tasks\",\n    taskItems: [\n      {id: uuidv4(), text: \"Bug fixes\", checked: false},\n      {id: uuidv4(), text: \"New features\", checked: false}\n    ]\n  },\n]\n","import React from 'react';\nimport { data } from './mockToDoData';\n\nexport const MyContext = React.createContext();\n\nexport default class MyProvider extends React.Component {\n  state = {\n    cards: [],\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('broadnet-todo')) {\n      localStorage.setItem('broadnet-todo', JSON.stringify(data));\n    }\n    const cards = JSON.parse(localStorage.getItem('broadnet-todo'));\n    this.setState({cards: cards});\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('broadnet-todo', JSON.stringify(this.state.cards));\n  }\n\n  addCard = (card) => {\n    this.setState({cards: [...this.state.cards, card]});\n  }\n\n  deleteCard = (id) => {\n    const updatedCards = this.state.cards.filter(card => card.id !== id);\n    this.setState({cards: updatedCards});\n  }\n\n  updateListItems = (listItems) => {\n    const card = this.state.cards.find(card => card.id === listItems.id);\n    card.taskItems = listItems.items;\n    localStorage.setItem('broadnet-todo', JSON.stringify(this.state.cards));\n  }\n\n  render() {\n    return (\n      <MyContext.Provider value={\n        {\n          state: this.state,\n          addCard: this.addCard,\n          deleteCard: this.deleteCard,\n          updateListItems: this.updateListItems,\n        }\n      }>\n        {this.props.children}\n      </MyContext.Provider>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { MyContext } from '../Context';\nimport './Form.css';\n\nfunction Form() {\n  const [title, setTitle] = useState(\"\");\n  const [taskItem, setTaskItem] = useState({id: uuidv4(), text: \"\", checked: false});\n  const [taskItems, updateTaskItems] = useState([]);\n  const [formError, updateFormError] = useState(false);\n\n  function addTask() {\n    if (taskItem.text.length) {\n      updateTaskItems([...taskItems, taskItem]);\n      setTaskItem({id: uuidv4(), text: \"\"});\n      updateFormError(false);\n    } else {\n      updateFormError(\"Please fill out the field before submitting.\");\n    }\n  }\n\n  function clearAll() {\n    setTitle(\"\");\n    setTaskItem({id: uuidv4(), text: \"\"});\n    updateTaskItems([]);\n    updateFormError(false);\n  }\n\n  function createTaskCard(createCard) {\n    if (title.length && taskItems.length) {\n      const taskCard = {\n        id: uuidv4(),\n        title: title,\n        taskItems: taskItems,\n      }\n      createCard(taskCard);\n      clearAll();\n    } else {\n      updateFormError(\"Please fill out all required fields.\");\n    }\n  }\n\n  function getTaskItems() {\n    return taskItems.map(item => <li key={item.id}>{item.text}</li>)\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <form className=\"form\">\n          <div className=\"input-label-container\">\n          <h2>To-Do List</h2>\n          <label htmlFor=\"title\">First, create a task list</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          </div>\n          <div className=\"input-label-container\">\n          <label htmlFor=\"item\">Next, add your tasks</label>\n          <div className=\"input-btn-container\">\n          <input\n            type=\"text\"\n            name=\"item\"\n            id=\"item\"\n            value={taskItem.text}\n            onChange={(e) => setTaskItem({id: taskItem.id, text: e.target.value})}\n          />\n          <button\n            type=\"button\"\n            className=\"add-item-btn\"\n            onClick={addTask}\n          >\n            +\n          </button>\n          </div>\n          <div className=\"task-items\">\n            <p>{title}</p>\n            <ul>\n              {getTaskItems()}\n            </ul>\n          </div>\n          </div>\n          <button\n            type=\"button\"\n            className=\"make-task-btn\"\n            onClick={() => createTaskCard(context.addCard)}\n          >\n            Make Task List\n          </button>\n          <a\n            className=\"clear-btn\"\n            onClick={clearAll}\n          >\n            Clear Task Items\n          </a>\n          {formError && <div>{formError}</div>}\n        </form>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport { MyContext } from '../Context';\nimport './ToDoCard.css';\n\nfunction ToDoCard({ id, title, taskItems }) {\n  const [checkedInputs, updateChecked] = useState({id: id, checkedInputs: []});\n\n  function isChecked(item) {\n    if (checkedInputs.checkedInputs.find(input => input === item)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function toggleChecked(item, updateState) {\n    let updatedItems;\n\n    if (checkedInputs.checkedInputs.find(input => input === item)) {\n      updatedItems = checkedInputs.checkedInputs.filter(input => input !== item);\n    } else {\n      updatedItems = [...checkedInputs.checkedInputs, item];\n    }\n\n    item.checked = !item.checked;\n\n    const updatedInputs = {\n      id: id,\n      checkedInputs: updatedItems,\n    }\n\n    updateChecked(updatedInputs);\n    updateState({id: id, items: taskItems})\n  }\n\n  function renderTaskItems(taskItems, updateState) {\n    return taskItems.map(item => (\n      <div className=\"list-row\" key={item.id}>\n        <input\n          type=\"checkbox\"\n          defaultChecked={item.checked}\n          onClick={() => toggleChecked(item, updateState)}\n        />\n        <li>{item.text}</li>\n      </div>\n    ))\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <article className=\"todo-card\">\n          <div className=\"card-top\">\n            <p className=\"card-title\">{ title }</p>\n            <button onClick={() => context.deleteCard(id)}>x</button>\n          </div>\n          <div className=\"card-list-items\">\n            <ul>\n              {renderTaskItems(taskItems, context.updateListItems)}\n            </ul>\n          </div>\n        </article>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default ToDoCard;\n","import React from 'react';\nimport { MyContext } from '../Context';\nimport ToDoCard from '../ToDoCard/ToDoCard';\nimport './ToDoContainer.css';\n\nfunction ToDoContainer() {\n\n  function displayCards(cards) {\n    const columnA = [];\n    const columnB = [];\n\n    cards.forEach(card => {\n      if (columnA.length > columnB.length) {\n        columnB.unshift(card);\n      } else {\n        columnA.unshift(card);\n      }\n    })\n\n    return (\n      <>\n        <div className=\"todo-container-left\">\n          {generateHTML(columnA)}\n        </div>\n        <div className=\"todo-container-right\">\n          {generateHTML(columnB)}\n        </div>\n      </>\n    )\n  }\n\n  function generateHTML(cards) {\n    return cards.map(card =>\n      <ToDoCard\n        key={card.id}\n        id={card.id}\n        title={card.title}\n        taskItems={card.taskItems}\n      />\n    )\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <section className=\"todo-container\">\n          {displayCards(context.state.cards)}\n        </section>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default ToDoContainer;\n","import React from 'react';\nimport Form from '../Form/Form';\nimport MyProvider from '../Context';\nimport ToDoContainer from '../ToDoContainer/ToDoContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <MyProvider>\n      <main className=\"App\">\n        <Form />\n        <ToDoContainer />\n      </main>\n    </MyProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}