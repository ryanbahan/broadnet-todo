{"version":3,"sources":["Context.js","Form/Form.js","ToDoCard/ToDoCard.js","ToDoContainer/ToDoContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","MyProvider","state","cards","id","Date","now","Math","random","title","taskItems","addCard","card","setState","deleteCard","updatedCards","filter","Provider","value","this","props","children","Component","Form","useState","setTitle","taskItem","setTaskItem","updateTaskItems","formError","updateFormError","addTask","length","clearAll","Consumer","context","className","htmlFor","type","name","onChange","e","target","map","item","key","onClick","createCard","ToDoCard","checkedInputs","updateChecked","renderTaskItems","defaultChecked","find","input","isChecked","updatedItems","toggleChecked","ToDoContainer","generateHTML","columnA","columnB","forEach","push","displayCards","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAEaA,EAAYC,IAAMC,gBAEVC,E,4MACnBC,MAAQ,CACNC,MAAO,CACL,CACEC,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,eACPC,UAAW,CAAC,iBAAkB,cAEhC,CACEN,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,kBACPC,UAAW,CAAC,kBAAmB,oBAAqB,gBAEtD,CACEN,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,eACPC,UAAW,CAAC,UAAW,WAAY,UAAW,QAAS,SAEzD,CACEN,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,iBACPC,UAAW,CAAC,WAAY,aAE1B,CACEN,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,YACPC,UAAW,CAAC,sBAEd,CACEN,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAO,YACPC,UAAW,CAAC,YAAa,mB,EAK/BC,QAAU,SAACC,GACT,EAAKC,SAAS,CAACV,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBS,O,EAG9CE,WAAa,SAACV,GACZ,IAAMW,EAAe,EAAKb,MAAMC,MAAMa,QAAO,SAAAJ,GAAI,OAAIA,EAAKR,KAAOA,KACjE,EAAKS,SAAS,CAACV,MAAOY,K,uDAItB,OACE,kBAACjB,EAAUmB,SAAX,CAAoBC,MAClB,CACEhB,MAAOiB,KAAKjB,MACZS,QAASQ,KAAKR,QACdG,WAAYK,KAAKL,aAGlBK,KAAKC,MAAMC,c,GAtDoBtB,IAAMuB,W,MCoG/BC,MApGf,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACPf,EADO,KACAgB,EADA,OAEkBD,mBAAS,IAF3B,mBAEPE,EAFO,KAEGC,EAFH,OAGuBH,mBAAS,IAHhC,mBAGPd,EAHO,KAGIkB,EAHJ,OAIuBJ,oBAAS,GAJhC,mBAIPK,EAJO,KAIIC,EAJJ,KAMd,SAASC,IACHL,EAASM,QACXJ,EAAgB,GAAD,mBAAKlB,GAAL,CAAgBgB,KAC/BC,EAAY,IACZG,GAAgB,IAEhBA,EAAgB,gDAIpB,SAASG,IACPR,EAAS,IACTE,EAAY,IACZC,EAAgB,IAChBE,GAAgB,GAqBlB,OACE,kBAAChC,EAAUoC,SAAX,MACG,SAAAC,GAAO,OACN,0BAAMC,UAAU,QACd,yBAAKA,UAAU,yBACf,2BAAOC,QAAQ,SAAf,cACA,2BACEC,KAAK,OACLC,KAAK,QACLnC,GAAG,QACHc,MAAOT,EACP+B,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOxB,WAGrC,yBAAKkB,UAAU,cACb,4BAlBD1B,EAAUiC,KAAI,SAAAC,GAAI,OAAI,wBAAIC,IAAKxC,KAAKC,MAAQC,KAAKC,UAAWoC,QAsB7D,yBAAKR,UAAU,yBACf,2BAAOC,QAAQ,QAAf,aACA,yBAAKD,UAAU,uBACf,2BACEE,KAAK,OACLC,KAAK,OACLnC,GAAG,OACHc,MAAOQ,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOxB,UAExC,4BACEoB,KAAK,SACLF,UAAU,eACVU,QAASf,GAHX,OASA,4BACEO,KAAK,SACLF,UAAU,gBACVU,QAAS,kBA3DKC,EA2DgBZ,EAAQxB,aA1D1CF,EAAMuB,QAAUtB,EAAUsB,QAM5Be,EALiB,CACf3C,GAAIC,KAAKC,MAAQC,KAAKC,SACtBC,MAAOA,EACPC,UAAWA,IAGbuB,KAEAH,EAAgB,yCAVpB,IAAwBiB,IAwDhB,kBAOA,4BACET,KAAK,SACLF,UAAU,YACVU,QAASb,GAHX,oBAOCJ,GAAa,6BAAMA,Q,MCjCfmB,MA5Df,YAA6C,IAAzB5C,EAAwB,EAAxBA,GAAIK,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAAa,EACHc,mBAAS,CAACpB,GAAIA,EAAI6C,cAAe,KAD9B,mBACnCA,EADmC,KACpBC,EADoB,KA4B1C,SAASC,EAAgBzC,GACvB,OAAOA,EAAUiC,KAAI,SAAAC,GAAI,OACvB,yBAAKR,UAAU,YACb,2BACEE,KAAK,WACLc,eAAgB,kBA9BxB,SAAmBR,GACjB,QAAIK,EAAcA,cAAcI,MAAK,SAAAC,GAAK,OAAIA,IAAUV,KA6B5BW,CAAUX,IAChCE,QAAS,kBAvBjB,SAAuBF,GACrB,IAAIY,EAGFA,EADEP,EAAcA,cAAcI,MAAK,SAAAC,GAAK,OAAIA,IAAUV,KACvCK,EAAcA,cAAcjC,QAAO,SAAAsC,GAAK,OAAIA,IAAUV,KAEzD,sBAAOK,EAAcA,eAArB,CAAoCL,IAQlDM,EALqB,CACnB9C,GAAIA,EACJ6C,cAAeO,IAYIC,CAAcb,MAE/B,wBAAIC,IAAKxC,KAAKC,MAAQC,KAAKC,UAAWoC,OAK5C,OACE,kBAAC9C,EAAUoC,SAAX,MACG,SAAAC,GAAO,OACN,6BAASC,UAAU,aACjB,yBAAKA,UAAU,YACb,uBAAGA,UAAU,cAAe3B,GAC5B,4BAAQqC,QAAS,kBAAMX,EAAQrB,WAAWV,KAA1C,WAEF,yBAAKgC,UAAU,mBACb,4BACGe,EAAgBzC,U,MCFhBgD,MAhDf,WA0BE,SAASC,EAAaxD,GACpB,OAAOA,EAAMwC,KAAI,SAAA/B,GAAI,OACnB,kBAAC,EAAD,CACEiC,IAAKjC,EAAKR,GACVA,GAAIQ,EAAKR,GACTK,MAAOG,EAAKH,MACZC,UAAWE,EAAKF,eAKtB,OACE,kBAACZ,EAAUoC,SAAX,MACG,SAAAC,GAAO,OACN,6BAASC,UAAU,kBAtCzB,SAAsBjC,GACpB,IAAMyD,EAAU,GACVC,EAAU,GAUhB,OARA1D,EAAM2D,SAAQ,SAAAlD,GACRgD,EAAQ5B,OAAS6B,EAAQ7B,OAC3B6B,EAAQE,KAAKnD,GAEbgD,EAAQG,KAAKnD,MAKf,oCACE,yBAAKwB,UAAU,uBACZuB,EAAaC,IAEhB,yBAAKxB,UAAU,wBACZuB,EAAaE,KAqBbG,CAAa7B,EAAQjC,MAAMC,Y,MC7BvB8D,MAXf,WACE,OACE,kBAAC,EAAD,KACE,0BAAM7B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ca88cf4.chunk.js","sourcesContent":["import React from 'react';\n\nexport const MyContext = React.createContext();\n\nexport default class MyProvider extends React.Component {\n  state = {\n    cards: [\n      {\n        id: Date.now() + Math.random(),\n        title: \"Default Card\",\n        taskItems: [\"Land this job!\", \"eat sushi\"]\n      },\n      {\n        id: Date.now() + Math.random(),\n        title: \"Today's Workout\",\n        taskItems: [\"Bench Press 3x5\", \"Overhead Lift 5x5\", \"Squats 5x10\"]\n      },\n      {\n        id: Date.now() + Math.random(),\n        title: \"Grocery List\",\n        taskItems: [\"Bananas\", \"Broccoli\", \"Chicken\", \"Bread\", \"Milk\"]\n      },\n      {\n        id: Date.now() + Math.random(),\n        title: \"Weekend to-dos\",\n        taskItems: [\"Mow Lawn\", \"Fix Sink\"]\n      },\n      {\n        id: Date.now() + Math.random(),\n        title: \"Next Week\",\n        taskItems: [\"Apply to Broadnet\"]\n      },\n      {\n        id: Date.now() + Math.random(),\n        title: \"Dev Tasks\",\n        taskItems: [\"Bug fixes\", \"New Features\"]\n      },\n    ]\n  }\n\n  addCard = (card) => {\n    this.setState({cards: [...this.state.cards, card]});\n  }\n\n  deleteCard = (id) => {\n    const updatedCards = this.state.cards.filter(card => card.id !== id);\n    this.setState({cards: updatedCards});\n  }\n\n  render() {\n    return (\n      <MyContext.Provider value={\n        {\n          state: this.state,\n          addCard: this.addCard,\n          deleteCard: this.deleteCard\n        }\n      }>\n        {this.props.children}\n      </MyContext.Provider>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport { MyContext } from '../Context';\nimport './Form.css';\n\nfunction Form() {\n  const [title, setTitle] = useState(\"\");\n  const [taskItem, setTaskItem] = useState(\"\");\n  const [taskItems, updateTaskItems] = useState([]);\n  const [formError, updateFormError] = useState(false);\n\n  function addTask() {\n    if (taskItem.length) {\n      updateTaskItems([...taskItems, taskItem]);\n      setTaskItem(\"\");\n      updateFormError(false);\n    } else {\n      updateFormError(\"Please fill out the field before submitting.\");\n    }\n  }\n\n  function clearAll() {\n    setTitle(\"\");\n    setTaskItem(\"\");\n    updateTaskItems([]);\n    updateFormError(false);\n  }\n\n  function createTaskCard(createCard) {\n    if (title.length && taskItems.length) {\n      const taskCard = {\n        id: Date.now() + Math.random(),\n        title: title,\n        taskItems: taskItems,\n      }\n      createCard(taskCard);\n      clearAll();\n    } else {\n      updateFormError(\"Please fill out all required fields.\");\n    }\n  }\n\n  function getTaskItems() {\n    return taskItems.map(item => <li key={Date.now() + Math.random()}>{item}</li>)\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <form className=\"form\">\n          <div className=\"input-label-container\">\n          <label htmlFor=\"title\">Task title</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          </div>\n          <div className=\"task-items\">\n            <ul>\n              {getTaskItems()}\n            </ul>\n          </div>\n          <div className=\"input-label-container\">\n          <label htmlFor=\"item\">Task item</label>\n          <div className=\"input-btn-container\">\n          <input\n            type=\"text\"\n            name=\"item\"\n            id=\"item\"\n            value={taskItem}\n            onChange={(e) => setTaskItem(e.target.value)}\n          />\n          <button\n            type=\"button\"\n            className=\"add-item-btn\"\n            onClick={addTask}\n          >\n            +\n          </button>\n          </div>\n          </div>\n          <button\n            type=\"button\"\n            className=\"make-task-btn\"\n            onClick={() => createTaskCard(context.addCard)}\n          >\n            Make Task List\n          </button>\n          <button\n            type=\"button\"\n            className=\"clear-btn\"\n            onClick={clearAll}\n          >\n            Clear Task Items\n          </button>\n          {formError && <div>{formError}</div>}\n        </form>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport { MyContext } from '../Context';\nimport './ToDoCard.css';\n\nfunction ToDoCard({ id, title, taskItems }) {\n  const [checkedInputs, updateChecked] = useState({id: id, checkedInputs: []});\n\n  function isChecked(item) {\n    if (checkedInputs.checkedInputs.find(input => input === item)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function toggleChecked(item) {\n    let updatedItems;\n\n    if (checkedInputs.checkedInputs.find(input => input === item)) {\n      updatedItems = checkedInputs.checkedInputs.filter(input => input !== item);\n    } else {\n      updatedItems = [...checkedInputs.checkedInputs, item];\n    }\n\n    const updatedInput = {\n      id: id,\n      checkedInputs: updatedItems,\n    }\n\n    updateChecked(updatedInput);\n  }\n\n  function renderTaskItems(taskItems) {\n    return taskItems.map(item => (\n      <div className=\"list-row\">\n        <input\n          type=\"checkbox\"\n          defaultChecked={() => isChecked(item)}\n          onClick={() => toggleChecked(item)}\n        />\n        <li key={Date.now() + Math.random()}>{item}</li>\n      </div>\n    ))\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <article className=\"todo-card\">\n          <div className=\"card-top\">\n            <p className=\"card-title\">{ title }</p>\n            <button onClick={() => context.deleteCard(id)}>Delete</button>\n          </div>\n          <div className=\"card-list-items\">\n            <ul>\n              {renderTaskItems(taskItems)}\n            </ul>\n          </div>\n        </article>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default ToDoCard;\n","import React from 'react';\nimport { MyContext } from '../Context';\nimport ToDoCard from '../ToDoCard/ToDoCard';\nimport './ToDoContainer.css';\n\nfunction ToDoContainer() {\n\n  function displayCards(cards) {\n    const columnA = [];\n    const columnB = [];\n\n    cards.forEach(card => {\n      if (columnA.length > columnB.length) {\n        columnB.push(card);\n      } else {\n        columnA.push(card);\n      }\n    })\n\n    return (\n      <>\n        <div className=\"todo-container-left\">\n          {generateHTML(columnA)}\n        </div>\n        <div className=\"todo-container-right\">\n          {generateHTML(columnB)}\n        </div>\n      </>\n    )\n  }\n\n  function generateHTML(cards) {\n    return cards.map(card =>\n      <ToDoCard\n        key={card.id}\n        id={card.id}\n        title={card.title}\n        taskItems={card.taskItems}\n      />\n    )\n  }\n\n  return (\n    <MyContext.Consumer>\n      {context => (\n        <section className=\"todo-container\">\n          {displayCards(context.state.cards)}\n        </section>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default ToDoContainer;\n","import React from 'react';\nimport Form from '../Form/Form';\nimport MyProvider from '../Context';\nimport ToDoContainer from '../ToDoContainer/ToDoContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <MyProvider>\n      <main className=\"App\">\n        <Form />\n        <ToDoContainer />\n      </main>\n    </MyProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}